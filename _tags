# OASIS_START
# DO NOT EDIT (digest: 29f4fb9b54877e238cd9c223d9194c93)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library capture
"lib/capture.cmxs": use_capture
"lib/packet.cmx": for-pack(Capture)
"lib/demux.cmx": for-pack(Capture)
"lib/ethernet.cmx": for-pack(Capture)
"lib/arp.cmx": for-pack(Capture)
"lib/icmp.cmx": for-pack(Capture)
"lib/ip4.cmx": for-pack(Capture)
"lib/udp4.cmx": for-pack(Capture)
"lib/tcp4.cmx": for-pack(Capture)
"lib/dhcp4.cmx": for-pack(Capture)
"lib/pcap.cmx": for-pack(Capture)
<lib/*.ml{,i}>: pkg_cstruct
<lib/*.ml{,i}>: pkg_cstruct.syntax
# Library mirage
"mirage/mirage.cmxs": use_mirage
# Library flowlib
"unix/flowlib.cmxs": use_flowlib
# Executable print
<unix/print.{native,byte}>: use_capture
<unix/print.{native,byte}>: pkg_lwt
<unix/print.{native,byte}>: pkg_lwt.syntax
<unix/print.{native,byte}>: pkg_cstruct
<unix/print.{native,byte}>: pkg_lwt.unix
<unix/print.{native,byte}>: pkg_cstruct.syntax
<unix/print.{native,byte}>: custom
# Executable flows
<unix/flows.{native,byte}>: use_capture
<unix/flows.{native,byte}>: pkg_lwt
<unix/flows.{native,byte}>: pkg_lwt.syntax
<unix/flows.{native,byte}>: pkg_cstruct
<unix/flows.{native,byte}>: pkg_lwt.unix
<unix/flows.{native,byte}>: pkg_cstruct.lwt
<unix/flows.{native,byte}>: pkg_cstruct.syntax
<unix/flows.{native,byte}>: custom
# Executable packed_flow
<unix/packed_flow.{native,byte}>: use_flowlib
<unix/packed_flow.{native,byte}>: use_capture
<unix/packed_flow.{native,byte}>: pkg_lwt
<unix/packed_flow.{native,byte}>: pkg_lwt.syntax
<unix/packed_flow.{native,byte}>: pkg_cstruct
<unix/packed_flow.{native,byte}>: pkg_lwt.unix
<unix/packed_flow.{native,byte}>: pkg_cstruct.lwt
<unix/packed_flow.{native,byte}>: pkg_cstruct.syntax
<unix/*.ml{,i}>: use_flowlib
<unix/*.ml{,i}>: pkg_lwt
<unix/*.ml{,i}>: pkg_lwt.syntax
<unix/*.ml{,i}>: pkg_lwt.unix
<unix/*.ml{,i}>: pkg_cstruct.lwt
<unix/packed_flow.{native,byte}>: custom
# Executable copy
<unix/copy.{native,byte}>: use_capture
<unix/copy.{native,byte}>: pkg_cstruct
<unix/copy.{native,byte}>: pkg_cstruct.syntax
<unix/*.ml{,i}>: use_capture
<unix/*.ml{,i}>: pkg_cstruct
<unix/*.ml{,i}>: pkg_cstruct.syntax
<unix/copy.{native,byte}>: custom
# Executable test
<lib_test/test.{native,byte}>: use_capture
<lib_test/test.{native,byte}>: pkg_lwt
<lib_test/test.{native,byte}>: pkg_cstruct
<lib_test/test.{native,byte}>: pkg_lwt.unix
<lib_test/test.{native,byte}>: pkg_oUnit
<lib_test/test.{native,byte}>: pkg_cstruct.syntax
<lib_test/*.ml{,i}>: use_capture
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/*.ml{,i}>: pkg_cstruct
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_oUnit
<lib_test/*.ml{,i}>: pkg_cstruct.syntax
<lib_test/test.{native,byte}>: custom
# Executable capture
<mirage/capture.{native,byte}>: use_capture
<mirage/capture.{native,byte}>: pkg_lwt
<mirage/capture.{native,byte}>: pkg_lwt.syntax
<mirage/capture.{native,byte}>: pkg_cstruct
<mirage/capture.{native,byte}>: pkg_mirage-net
<mirage/capture.{native,byte}>: pkg_mirage
<mirage/capture.{native,byte}>: pkg_cstruct.syntax
<mirage/*.ml{,i}>: use_capture
<mirage/*.ml{,i}>: pkg_lwt
<mirage/*.ml{,i}>: pkg_lwt.syntax
<mirage/*.ml{,i}>: pkg_cstruct
<mirage/*.ml{,i}>: pkg_mirage-net
<mirage/*.ml{,i}>: pkg_mirage
<mirage/*.ml{,i}>: pkg_cstruct.syntax
<mirage/capture.{native,byte}>: custom
# OASIS_STOP
<**/*.ml{,i}>: syntax_camlp4o, pkg_camlp4
true: annot

